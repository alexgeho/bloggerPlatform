import { Request, Response } from "express";
import { blogsService } from "../../application/blogs.service";
import { postsService } from "../../../posts/application/posts.service";
import { RepositoryNotFoundError } from "../../../../core/errors/repository-not-found.error";
import { errorsHandler } from "../../../../core/errors/errors.handler";
import { PostDocument } from "../../../posts/domain/post.mangoose";
import {likesService} from "../../../likes/likes.serviceAndRep";

export async function getBlogPostsHandler(req: Request, res: Response) {
    try {
        const blogId = req.params.blogId;

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–ª–æ–≥ (–∏–Ω–∞—á–µ 404)
        await blogsService.findByIdOrFail(blogId);

        // ‚úÖ userId ‚Äî –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ middleware (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        const userId = req.user?.userId;

        // ‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        const pageNumber = +(req.query.pageNumber || 1);
        const pageSize = +(req.query.pageSize || 10); // üëà –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–µ—Ñ–æ–ª—Ç, –Ω–µ 15
        const sortBy = typeof req.query.sortBy === "string" ? req.query.sortBy : "createdAt";
        const sortDirection = req.query.sortDirection === "asc" ? "asc" : "desc";

        // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –±–ª–æ–≥–∞
        const postsPage = await postsService.findAllByBlogId(
            blogId,
            pageNumber,
            pageSize,
            sortBy,
            sortDirection
        );

        // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ extendedLikesInfo –∫ –∫–∞–∂–¥–æ–º—É –ø–æ—Å—Ç—É
        const itemsWithLikes = await Promise.all(
            postsPage.items.map(async (p: PostDocument) => {
                const extendedLikesInfo = await likesService.findAllLikesOnPost(p._id.toString(), userId);
                return {
                    id: p._id.toString(),
                    title: p.title,
                    shortDescription: p.shortDescription,
                    content: p.content,
                    blogId: p.blogId,
                    blogName: p.blogName,
                    createdAt: p.createdAt,
                    extendedLikesInfo, // üëà —Å—é–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫–∏
                };
            })
        );

        // ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç (–∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç Swagger –∏ –∞–≤—Ç–æ—Ç–µ—Å—Ç)
        const result = {
            pagesCount: Math.ceil(postsPage.totalCount / pageSize),
            page: pageNumber,
            pageSize,
            totalCount: postsPage.totalCount,
            items: itemsWithLikes,
        };

        return res.status(200).json(result);
    } catch (e) {
        if (e instanceof RepositoryNotFoundError) {
            return res.status(e.status).send({ message: "Blog not found" });
        }

        errorsHandler(e, res);
    }
}
